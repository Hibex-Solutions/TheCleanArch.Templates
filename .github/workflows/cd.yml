name: Continuous Delivery

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+*"

env:
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  GITHUB_NUGET_SOURCE: "https://nuget.pkg.github.com/Hibex-Solutions/index.json"
  NUGET_SOURCE: "https://api.nuget.org/v3/index.json"
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NUGET_TOKEN: ${{ secrets.NUGET_THECLEANARCH_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x

      - name: Restore
        run: |
          dotnet tool restore
          dotnet restore

      - name: Set up version
        id: version
        run: |
          # v0.0.0[+{*}]
          if [[ "$GITHUB_REF" =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+(\+.*)?$ ]]; then
            echo "IF v0.0.0[+{*}]!"
            echo "is_released=true" >> "$GITHUB_OUTPUT"
            echo "is_prerelease=false" >> "$GITHUB_OUTPUT"
            echo "is_public=true" >> "$GITHUB_OUTPUT"

          # v0.0.0-{beta|rc}{*}
          elif [[ "$GITHUB_REF" =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+\-beta|rc.*$ ]]; then
            echo "ELIF v0.0.0-{preview|rc}{*}!"
            echo "is_released=true" >> "$GITHUB_OUTPUT"
            echo "is_prerelease=true" >> "$GITHUB_OUTPUT"
            echo "is_public=true" >> "$GITHUB_OUTPUT"

          # v0.0.0-{*}
          elif [[ "$GITHUB_REF" =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+\-.*$ ]]; then
            echo "ELIF v0.0.0-{*}!"
            echo "is_released=true" >> "$GITHUB_OUTPUT"
            echo "is_prerelease=true" >> "$GITHUB_OUTPUT"
            echo "is_public=false" >> "$GITHUB_OUTPUT"

          # {*}
          else
            echo "ELSE!"
            echo "is_released=false" >> "$GITHUB_OUTPUT"
            echo "is_prerelease=false" >> "$GITHUB_OUTPUT"
            echo "is_public=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Check outputs
        env:
          IS_RELEASED: ${{ steps.version.outputs.is_released }}
          IS_PRERELEASE: ${{ steps.version.outputs.is_prerelease }}
          IS_PUBLIC: ${{ steps.version.outputs.is_public }}
        run: |
          echo "IS_RELEASED = $IS_RELEASED"
          echo "IS_PRERELEASE = $IS_PRERELEASE"
          echo "IS_PUBLIC = $IS_PUBLIC"

      - name: Build
        if: ${{ steps.version.outputs.is_released }}
        run: dotnet build -c Release --no-restore

      - name: Publish private packages
        if: ${{ steps.version.outputs.is_released == 'true' && steps.version.outputs.is_prerelease == 'true' && steps.version.outputs.is_public == 'false' }}
        run: |
          version_prefix=$(dotnet gitversion /output json /showvariable MajorMinorPatch)
          build_metadata=$(dotnet gitversion /output json /showvariable BuildMetaDataPadded)
          nuget_tag=$(dotnet gitversion /output json /showvariable NuGetPreReleaseTagV2)
          short_sha=$(dotnet gitversion /output json /showvariable ShortSha)

          if [[ -n "$nuget_tag" ]]; then
            version_suffix="$nuget_tag"
          elif [[ -n "$build_metadata" ]]; then
            version_suffix="alpha.$build_metadata"
          else
            version_suffix="alpha"
          fi

          if ! [[ "$version_suffix" =~ ^beta|rc[0-9]+$ ]]; then
            version_suffix="$version_suffix.sha.$short_sha"
          fi

          dotnet pack -c Release /p:VersionPrefix="$version_prefix" /p:VersionSuffix="$version_suffix"  --output ./artifacts
          dotnet nuget push ./artifacts/TheCleanArch.Templates.*.nupkg --source "$GITHUB_NUGET_SOURCE"  --api-key "${GITHUB_TOKEN}"

      - name: Publish public packages
        if: ${{ steps.version.outputs.is_released == 'true' && steps.version.outputs.is_prerelease == 'true' && steps.version.outputs.is_public == 'true' }}
        run: |
          version_prefix=$(dotnet gitversion /output json /showvariable MajorMinorPatch)
          build_metadata=$(dotnet gitversion /output json /showvariable BuildMetaDataPadded)
          nuget_tag=$(dotnet gitversion /output json /showvariable NuGetPreReleaseTagV2)
          short_sha=$(dotnet gitversion /output json /showvariable ShortSha)

          if [[ -n "$nuget_tag" ]]; then
            version_suffix="$nuget_tag"
          elif [[ -n "$build_metadata" ]]; then
            version_suffix="beta.$build_metadata"
          else
            version_suffix="beta"
          fi

          if ! [[ "$version_suffix" =~ ^beta|rc[0-9]+$ ]]; then
            version_suffix="$version_suffix.sha.$short_sha"
          fi

          dotnet pack -c Release /p:VersionPrefix="$version_prefix" /p:VersionSuffix="$version_suffix"  --output ./artifacts
          dotnet nuget push ./artifacts/TheCleanArch.Templates.*.nupkg --source "$GITHUB_NUGET_SOURCE"  --api-key "${GITHUB_TOKEN}"
          dotnet nuget push ./artifacts/TheCleanArch.Templates.*.nupkg --source "$NUGET_SOURCE"  --api-key "${NUGET_TOKEN}"

      - name: Release packages
        if: ${{ steps.version.outputs.is_released == 'true' && steps.version.outputs.is_prerelease == 'false' && steps.version.outputs.is_public == 'true' }}
        run: |
          full_semver=$(dotnet gitversion /output json /showvariable FullSemVer)

          dotnet pack -c Release /p:Version="$full_semver" --output ./artifacts
          dotnet nuget push ./artifacts/TheCleanArch.Templates.*.nupkg --source "$GITHUB_NUGET_SOURCE"  --api-key "${GITHUB_TOKEN}"
          dotnet nuget push ./artifacts/TheCleanArch.Templates.*.nupkg --source "$NUGET_SOURCE"  --api-key "${NUGET_TOKEN}"
